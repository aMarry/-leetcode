既然动态规划都超时了，那么必然就得用贪心算法了。
贪心算法的本质是在动态规划的基础上舍弃一些不可能的情况，类似于回溯算法的剪枝过程。
 
题目：
给定一个非负整数数组，你最初位于数组的第一个位置。
数组中的每个元素代表你在该位置可以跳跃的最大长度。
判断你是否能够到达最后一个位置。

示例 1:
输入: [2,3,1,1,4]
输出: true
解释: 从位置 0 到 1 跳 1 步, 然后跳 3 步到达最后一个位置。

示例 2:
输入: [3,2,1,0,4]
输出: false
解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。

题解：
看错题了，哈哈哈，最大长度内都可以， 还不可以向左跳。

用贪心算法，找到成最大长度与i作比较

bool canJump(vector<int>& nums) {
        if (nums.size()==0) return true;
        int ans = 0;
        for (int i = 0; i < nums.size(); ++i) {
            if (i > ans) return false;
            ans = max(ans, i + nums[i]);

        }
        return true;
}
